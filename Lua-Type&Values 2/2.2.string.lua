--[[
\a     bell
\b     back space
\f     form feed
\n     newline
\r     carriage return
\t     horizontal tab
\v     vertical tab
\\     backslash
\"     double quote
\'     single quote
]]

--[[
字符串 可以用单引号或双引号括起。 字面串内部可以上述包含C风格的转义串

字符串还可以用一种 长括号 括起来的方式定义。 
我们把两个正的方括号间插入 n 个等号定义为 第 n 级开长括号。 
就是说，0 级开的长括号写作 [[ ， 一级开长括号写作 [=[ ， 如此等等。 
闭长括号也作类似定义； 举个例子，4 级反的长括号写作 ]====] 。 
一个长字符串 可以由任何一级的开长括号开始，而由第一个碰到的同级的闭长括号结束。 
这种方式描述的字符串可以包含任何东西，当然特定级别的反长括号除外。 

整个词法分析过程将不受分行限制，不处理任何转义符，并且忽略掉任何不同级别的长括号。 
其中碰到的任何形式的换行串（回车、换行、回车加换行、换行加回车），都会被转换为单个换行符。
字面串中的每个不被上述规则影响的字节都呈现为本身。 

对于非文本数据，用引号括起来并显式按转义符规则来表述更安全。
]]

--[[
为了方便起见， 当一个开长括号后紧接一个换行符时， 这个换行符不会放在字符串内。 
举个例子，假设一个系统使用 ASCII 码 （此时 'a' 编码为 97 ， 换行编码为 10 ，'1' 编码为 49 ）， 
下面五种方式描述了完全相同的字符串：
]]

a = 'Lua\n123"'
print("1: ".. a)

a = "Lua\n123\""
print("2: ".. a)

a = 'Lu\097\010\04923"'
print("3: ".. a)

a = [[Lua
123"]]
print("4: ".. a)


a = [==[
Lua
123"
]==]
print("5: ".. a)

-- 数字和字符串的自动转换
print("1+1")
print(1+'1')

print(11 .. 11 + '1')


--将number转换为string，可以用函数tostring。另外，可以用“#”来取得一个string的长度。

print(type(tostring(100)))

str = "Hello world"
print("Length: " .. #str)
strNew = string.gsub(str, "world", "Lua")
print(strNew)






